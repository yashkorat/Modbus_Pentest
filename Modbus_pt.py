import subprocess
import time
import argparse

def capture_modbus_traffic(interface, capture_file, capture_duration):
    """
    Captures MODBUS traffic for a specified duration and saves it to a file.
    
    Args:
    - interface (str): The interface to capture from (e.g., 'eth0').
    - capture_file (str): The file to save the capture to.
    - capture_duration (int): The duration to capture for in seconds.
    """
    print(f"Starting MODBUS capture on interface {interface} for {capture_duration} seconds...")
    capture_command = ['tcpdump', '-i', interface, 'port 502', '-w', capture_file]
    process = subprocess.Popen(capture_command)
    time.sleep(capture_duration)
    process.terminate()
    print(f"Capture complete. Saved to {capture_file}")

def replay_modbus_traffic(interface, capture_file):
    """
    Replays MODBUS traffic from a capture file.
    
    Args:
    - interface (str): The interface to replay from (e.g., 'eth0').
    - capture_file (str): The capture file to replay.
    """
    print(f"Replaying MODBUS traffic from file {capture_file} on interface {interface}...")
    replay_command = ['tcpreplay', '--intf1=' + interface, capture_file]
    subprocess.run(replay_command)
    print("Replay complete.")

def inject_custom_modbus_packet(interface, src_ip, dest_ip, src_port, dest_port, payload):
    """
    Injects a custom MODBUS packet.
    
    Args:
    - interface (str): The interface to inject from (e.g., 'eth0').
    - src_ip (str): The source IP address.
    - dest_ip (str): The destination IP address.
    - src_port (int): The source port.
    - dest_port (int): The destination port.
    - payload (str): The payload to inject (hex string).
    """
    print(f"Injecting custom MODBUS packet from {src_ip}:{src_port} to {dest_ip}:{dest_port} with payload: {payload}")
    inject_command = [
        'sendip', '-p', 'ipv4', '-is', src_ip, '-p', 'tcp', '-ts', str(src_port), '-td', str(dest_port), '-d', payload, '-v', interface
    ]
    subprocess.run(inject_command)
    print("Packet injection complete.")

def main():
    parser = argparse.ArgumentParser(description="MODBUS Traffic Capture and Injection Tool")
    parser.add_argument('--interface', type=str, required=True, help="The interface to use (e.g., 'eth0')")
    parser.add_argument('--capture-file', type=str, required=True, help="The file to save the capture to")
    parser.add_argument('--capture-duration', type=int, required=True, help="The duration to capture traffic (in seconds)")
    parser.add_argument('--src-ip', type=str, required=True, help="The source IP address for the custom packet")
    parser.add_argument('--dest-ip', type=str, required=True, help="The destination IP address for the custom packet")
    parser.add_argument('--src-port', type=int, required=True, help="The source port for the custom packet")
    parser.add_argument('--dest-port', type=int, required=True, help="The destination port for the custom packet")
    parser.add_argument('--payload', type=str, required=True, help="The payload to inject (hex string)")

    args = parser.parse_args()

    # Capture MODBUS traffic
    capture_modbus_traffic(args.interface, args.capture_file, args.capture_duration)

    # Replay the captured traffic
    replay_modbus_traffic(args.interface, args.capture_file)

    # Inject a custom MODBUS packet
    inject_custom_modbus_packet(args.interface, args.src_ip, args.dest_ip, args.src_port, args.dest_port, args.payload)

if __name__ == "__main__":
    main()
